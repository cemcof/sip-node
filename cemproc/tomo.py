import datetime
import os
import pathlib
import re
import typing
import numpy as np

from cemproc.motioncor import MotionCorr2
from common import LmodEnvProvider, StateObj
from data_tools import DataTransferSource, DataRule, FsTransferSource, DataRulesWrapper


class MicrographMetadata:
    def __init__(self, name: str, dt: datetime.datetime, stage_pos, image_shift, tilt_angle):
        self.name = name
        self.stage_pos = stage_pos
        self.image_shift = image_shift
        self.tilt_angle = tilt_angle
        self.dt = dt

    def __str__(self):
        return f"{self.name:<20} {self.dt:<25} {str(self.stage_pos):<20} {str(self.image_shift):<20} {self.tilt_angle:<10.2f}"

class Micrograph:
    def __init__(self, data_file: pathlib.Path, meta_file: pathlib.Path):
        self.data_file = data_file
        self.meta_file = meta_file
        self.metadata = self._extract_mdoc()

    def _extract_mdoc(self):
        content = self.meta_file.read_text()

        datetime_pattern = re.search(r'DateTime = (\d{2}-[A-Za-z]{3}-\d{4}  \d{2}:\d{2}:\d{2})', content).group(1)
        stage_position_pattern = re.search(r'StagePosition = ([\d\-.]+) ([\d\-.]+)', content)
        image_shift_pattern = re.search(r'ImageShift = ([\d\-.]+) ([\d\-.]+)', content)
        tilt_angle_pattern = re.search(r'TiltAngle = ([\d\-.]+)', content).group(1)

        return MicrographMetadata(
            name=self.data_file.name,
            dt=datetime.datetime.strptime(datetime_pattern, "%d-%b-%Y  %H:%M:%S"),
            stage_pos=(float(stage_position_pattern.group(1)), float(stage_position_pattern.group(2))),
            image_shift=(float(image_shift_pattern.group(1)), float(image_shift_pattern.group(2))),
            tilt_angle=float(tilt_angle_pattern),
        )




class TiltSeries:
    def __init__(self):
        self.micrographs = []

    def add_micrograph(self, mic: Micrograph):
        pass

    def stack(self):
        pass

class StageSeries:
    def __init__(self, position):
        self.position = position

    def create_tilt_series_clusters(self):
        pass


class TomoSession:
    def __init__(self, source_dir: pathlib.Path, working_dir: pathlib.Path, lmod_env_provider: LmodEnvProvider, **kwargs):
        self.source_dir = source_dir
        self.working_dir = working_dir
        self.run_dir = working_dir / "_run"
        self.current_stage = None

        self.processed_mics_file = self.run_dir / "mics.dat"
        self.processed_mics = set()

        self._load_state()

        self.motion_corr_runner = MotionCorr2(out_dir=self.run_dir, lmod=lmod_env_provider, **kwargs)
        self.ctf_runner = None


    def _add_mic_to_stage(self, mic: Micrograph):

        pass

    def _load_state(self):
        if self.processed_mics_file.exists():
            self.processed_mics = set(self.processed_mics_file.read_text().splitlines())

    def consume_next_micrograph(self, mic: Micrograph):
        """ Expect micrographs given in sorted order - as generated by the instrument """

        # Lets run motioncorr/ctf on micrograph first
        self.motion_corr_runner.run(in_micrograph=mic.data_file)

        # After this is done, lets give this to group
        self._add_mic_to_stage(mic)
        pass

    def process_stage(self):
        pass

    def run(self):
        dr = DataRule(patterns=["*.tif"], tags=["raw"])
        fs_source = FsTransferSource(self.source_dir)
        glb = fs_source.glob(DataRulesWrapper(dr))
        mics = []
        # In scanning, we ignore processed mics
        try:
            while True:
                data = next(glb)
                meta = next(glb)
                mic = Micrograph(self.source_dir / data[0], self.source_dir / meta[0])
                self.consume_next_micrograph(mic)
        except StopIteration:
            pass  # Iterator is exhausted

        import matplotlib.pyplot as plt

        posss = [tuple(np.add(m.metadata.stage_pos, m.metadata.image_shift)) for m in mics]
        # Unpack tuples into separate x and y lists
        x, y = zip(*posss)

        # Plot the points
        plt.scatter(x, y, color='blue', marker='o')
        plt.xlabel("X-axis")
        plt.ylabel("Y-axis")
        plt.title("Point Visualization")
        plt.grid(True)
        plt.savefig("test.png")


if __name__ == "__main__":
    testsess = TomoSession("test", pathlib.Path("/storage/brno14-ceitec/shared/cemcof/internal/projects/brain_tissue/250203_Nedozralova_tau_brain_tomo_43151c9e/Raw/Movies"),
                    pathlib.Path("/storage/brno14-ceitec/home/emcf/scratch/GPUA/tomotest")).run()

    pass
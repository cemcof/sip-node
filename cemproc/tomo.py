import pathlib
import time

import data_tools

from cemproc.ctf import CtfFind5
from cemproc.imod import Imod
from cemproc.micrograph import Micrograph, InvalidMicrographType
from cemproc.motioncor import MotionCorr3
from cemproc.tilt_series import StageSeriesAngleBased
from common import LmodEnvProvider, StateObj
from data_tools import DataTransferSource, DataRule, FsTransferSource, DataRulesWrapper
from experiment import ExperimentStorageEngine

# Key features to keep in mind:

# Reentrancy - keep progress even if disrupted, continue on relaunch and eventually end up done
# Continuous on the fly processing - scan and accept existing and new input
# Customizable via arguments, invocable from either python code or command line, so it can be integrated with qsub
# Uses simple filesystem (pathlib) as IO for input and results

class CemcofTomoWorkflow:
    def __init__(self, args, logger):
        self.logger = logger
        self.args = args

        self.source_dir = args.source_dir
        self.working_dir = args.working_dir
        self.run_dir = self.working_dir / "_run"

        self.movie_patterns = DataRulesWrapper(args.movie_patterns) if isinstance(args.movie_patterns, data_tools.DataRule) \
            else DataRulesWrapper( data_tools.DataRule(patterns=args.movie_patterns, tags="movie"))
        self.gain_patterns = DataRulesWrapper(args.gain_patterns) if isinstance(args.gain_patterns, data_tools.DataRule) \
            else DataRulesWrapper( data_tools.DataRule(patterns=args.gain_patterns, tags="gain"))

        self.processed_mics_file = self.run_dir / "processed_mics.dat"
        self.last_id_file = self.run_dir / "last_tilt_id.dat"
        self.processed_mics = set()
        self.next_tilt_id = 0

        self.current_stage = StageSeriesAngleBased(self.next_tilt_id)
        self._load_state()

        self.run_continuously = args.run_mode == "continuous"

        lmod_provider = LmodEnvProvider(args.lmod_path)

        self.motion_corr_runner = MotionCorr3(
            lmod=lmod_provider.with_modules(args.get('motioncorr_module', 'MotionCor3/1.0.1')),
            out_dir=self.run_dir,
            voltage=args.voltage,
            apix=args.apix,
            pre_dose=args.pre_dose,
            frame_dose=args.frame_dose,
            gain_file=args.get('gain_file', None),
            gpu_id=0)

        self.ctf_runner = CtfFind5(
            lmod=lmod_provider.with_modules(args.get('ctf_module', 'ctffind/5.0.2')),
            out_dir=self.run_dir,
            voltage=args.voltage,
            apix=args.apix,
            cs=args.cs,
            ac=args.ac,
            pwr_size=args.pwr_size,
            defocus_min=args.defocus_min,
            defocus_max=args.defocus_max,
            res_min=args.res_min,
            res_max=args.res_max,
            phase_plate=args.phase_plate,
            min_phase_shift=args.min_phase_shift,
            max_phase_shift=args.max_phase_shift)

        self.imod_runner = Imod(env_setup=lmod_provider.with_modules(args.get('imod_module', 'imod')))


    def _load_state(self):
        if self.processed_mics_file.exists():
            self.processed_mics = set(self.processed_mics_file.read_text().splitlines())
        if self.last_id_file.exists():
            self.next_tilt_id = int(self.last_id_file.read_text()) + 1

    def consume_next_micrograph(self, mic: Micrograph):
        """ Expect micrographs given in sorted order - as generated by the instrument """

        # Lets run motioncorr/ctf on micrograph first
        self.logger.info("TOMO: processing movie " + mic.data_file.name + "- motioncor + ctf")
        out_mrc = self.run_dir / (mic.data_file.stem + ".mrc")
        mic.corrected_data_file, dose = self.motion_corr_runner.run(in_micrograph=mic.data_file, out_micrograph=out_mrc, skip_if_results_exist=True)

        # Lets run ctf estimation
        ctf_pwr_path = self.run_dir / (mic.data_file.stem + "_pwr.mrc")
        mic.ctf_pwr_file, mic.ctf_info_file = self.ctf_runner.run(mic.corrected_data_file, ctf_pwr_path, skip_if_results_exist=True)

        # After this is done, lets give this to group
        added = self.current_stage.try_add_micrograph(mic)
        self.logger.info("TOMO: micrograph generated, adding to tilt series")
        if not added:
            self.logger.info(f"TOMO: stage position completed, generating tilt series and tomograms...")
            tilt_sers = self.process_stage()
            self.current_stage = StageSeriesAngleBased(self.next_tilt_id)
            return tilt_sers

    def set_gainfile(self, path: pathlib.Path):
        self.motion_corr_runner.gain_file = path

    def mark_micrographs_as_processed(self, mics):
        with open(self.processed_mics_file, "a") as f:
            for mic in mics:
                self.processed_mics.add(mic.data_file.name)
                f.write(mic.data_file.name + "\n")

    def mark_tilt_id(self, tilt_id):
        self.last_id_file.write_text(str(tilt_id))

    def process_stage(self):
        tilt_sers = self.current_stage.find_tilt_series()
        for ts in tilt_sers:
            # For each titl series - newstack
            ts.stack(
                self.run_dir / f"tomo_{ts.series_id}.mrc",
                self.run_dir / f"tomo_{ts.series_id}_pw.mrc",
                self.imod_runner)

            # Tilt series done - mark id, clean, moves...
            ts.move_results(self.working_dir / ts.series_name)
            self.mark_micrographs_as_processed(ts.micrographs)
            self.mark_tilt_id(ts.series_id)

        return tilt_sers

    def scan_movies(self):
        return data_tools.multiglob(self.source_dir, self.movie_patterns)

    def scan_gainfile(self):
        return next(data_tools.multiglob(self.source_dir, self.gain_patterns), None)

    def run(self):
        if self.run_continuously:
            while True:
                self.run_single()
                time.sleep(10)
        else:
            return self.run_single()

    def run_single(self):
        glb_movies = self.scan_movies()

        gain_file = self.scan_gainfile()
        if gain_file:
            self.set_gainfile(self.source_dir / gain_file[0])

        try:
            while True:
                print("CONSMED START")
                data = next(glb_movies)
                meta = next(glb_movies)

                try:
                    mic = Micrograph.parse(self.source_dir / data[0], self.source_dir / meta[0])
                    # We do tilt series processing only if not done on mic...
                    tilt_sers = self.consume_next_micrograph(mic)
                    if tilt_sers:
                        self.logger.info(f"New tilt series generated: {tilt_sers}")
                        # If we generated new tilt series, move raw movies accordingly
                        pass
                except InvalidMicrographType:
                    self.logger.warning(f"Skipping {data[0]}")
                    continue
                except Exception as e:
                    self.logger.error(f"Failed to process {data[0]}", exc_info=e)

                print(f"CONSMED END ")
        except StopIteration:
            pass  # Iterator is exhausted

